# Create the condition order table
condition_order <- data.frame(
participant = c("HOBI6W", "QH0J5Y", "I1PHGZ", "E8N9LB", "SZFD9P", "KEJXS2", "UFB0W2",
"DLB8C7", "MQKC6D", "JN3R72", "2QAC38", "U859EF"),
first = c(2, 3, 1, 2, 2, 3, 2, 3, 2, 2, 3, 1),
second = c(3, 1, 2, 2, 2, 3, 2, 1, 3, 2, 2, 2),
third = c(1, 2, 3, 1, 1, 1, 1, 3, 1, 3, 1, 3)
)
calculate_max_height <- function(cnum, pnum, dtFiltered) {
max_height_data <- data.frame()  # Initialize an empty data frame to store max heights
outlier_threshold <- 2  # Set an appropriate threshold to discard outliers
for (c in cnum) {
for (p in pnum) {
# Get all vectors
yright <- right(p, c)$pos_y
yleft <- left(p, c)$pos_y
time <- (right(p, c)$time - right(p, c)$time[1])
# Find the indices where the participant steps onto the targets
right_rows <- dtFiltered()[condition == c & leg == "right" & participant == p,]
left_rows <- dtFiltered()[condition == c & leg == "left" & participant == p,]
# Initialize a vector to store max heights for all targets
max_heights <- numeric()
for (target_index in right_rows$index) {
if (!is.na(target_index)) {  # Check if the target is reached within the time limit
# Calculate maximum height before stepping onto the target
max_heights <- c(max_heights, max(yright[1:target_index], yleft[1:target_index]))
}
}
for (target_index in left_rows$index) {
if (!is.na(target_index)) {  # Check if the target is reached within the time limit
# Calculate maximum height before stepping onto the target
max_heights <- c(max_heights, max(yright[1:target_index], yleft[1:target_index]))
}
}
# Filter out outliers
max_heights <- max_heights[max_heights <= outlier_threshold]
# Create a data frame with max heights for each participant, condition, and target
max_height_rows <- data.frame(max_height = max_heights,
condition = c,
participant = p,
target = seq_along(max_heights))
# Add the rows to the max height data
max_height_data <- rbind(max_height_data, max_height_rows)
}
}
return(max_height_data)
}
# Reactive context to generate and process data
observe({
# Generate the max_height_data using the function
max_height_data <- calculate_max_height(input$cnum, input$pnum, dtFiltered)
# Ensure the participant column is character
max_height_data$participant <- as.character(max_height_data$participant)
# Merge with condition order table to map trial numbers to conditions
max_height_data <- left_join(max_height_data, condition_order, by = "participant")
# Map the trial numbers to conditions
max_height_data <- max_height_data %>%
mutate(ConditionMapped = case_when(
target == 1 ~ first,
target == 2 ~ second,
target == 3 ~ third,
TRUE ~ NA_real_
))
# Convert ConditionMapped to factor with appropriate labels
max_height_data$ConditionMapped <- factor(max_height_data$ConditionMapped,
levels = c(1, 2, 3),
labels = c("A", "F", "N"))
# Save to a reactive value for access in the plot rendering
reactive_values$max_height_data <- max_height_data
})
